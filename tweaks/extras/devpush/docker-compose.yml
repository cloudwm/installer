services:
  app:
    build:
      context: .
      dockerfile: Docker/Dockerfile.app
    entrypoint: /entrypoint.app.sh
    restart: always
    depends_on:
      - redis
      - pgsql
    networks:
      - default
      - internal
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${APP_HOSTNAME}`)"
      - "traefik.http.routers.app.service=app@docker"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
      - "traefik.docker.network=devpush_default"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 20s

  worker-arq:
    build:
      context: .
      dockerfile: Docker/Dockerfile.app
    entrypoint: /entrypoint.worker-arq.sh
    restart: always
    stop_grace_period: ${JOB_TIMEOUT:-320}s
    depends_on:
      - redis
      - pgsql
    networks:
      - default
      - internal
      - runner
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "uv", "run", "arq", "--check", "workers.arq.WorkerSettings"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 20s

  worker-monitor:
    build:
      context: .
      dockerfile: Docker/Dockerfile.app
    entrypoint: /entrypoint.worker-monitor.sh
    restart: always
    depends_on:
      - redis
      - pgsql
    networks:
      - default
      - internal
      - runner
    env_file:
      - .env

  redis:
    image: redis:alpine
    restart: always
    networks:
      - internal

  docker-proxy:
    image: tecnativa/docker-socket-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CONTAINERS=1
      - POST=1
      - EXEC=1
      - NETWORKS=1
      - DISABLE_IPV6=1
    networks:
      - internal

  traefik:
    image: traefik:v3.3.2
    restart: always
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=tcp://docker-proxy:2375"
      - "--providers.docker.watch=true"
      - "--providers.file.directory=/etc/traefik/dynamic_conf"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    networks:
      - default
      - internal
      - runner
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deployment-not-found.rule=HostRegexp(`^(.+)\\.${DEPLOY_DOMAIN}$`)"
      - "traefik.http.routers.deployment-not-found.entrypoints=web"
      - "traefik.http.routers.deployment-not-found.priority=1"
      - "traefik.http.routers.deployment-not-found.service=noop@internal"
      - "traefik.http.routers.deployment-not-found.middlewares=deployment-redirect"
      - "traefik.http.middlewares.deployment-redirect.redirectRegex.regex=^https?://([^/]+)"
      - "traefik.http.middlewares.deployment-redirect.redirectRegex.replacement=${URL_SCHEME:-https}://${APP_HOSTNAME}/deployment-not-found/$$1"
      - "traefik.http.middlewares.deployment-redirect.redirectRegex.permanent=false"

  pgsql:
    image: postgres:16
    restart: always
    networks:
      - internal
    env_file:
      - .env
    environment:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      POSTGRES_DB: ${POSTGRES_DB:-devpush}
      POSTGRES_USER: ${POSTGRES_USER:-devpush-app}
    volumes:
      - devpush-db:/var/lib/postgresql/data

  loki:
    image: grafana/loki:3.4.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - default
      - internal
    volumes:
      - loki-data:/loki
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  devpush-db:
  loki-data:

networks:
  default:
    name: devpush_default
  internal:
    name: devpush_internal
    internal: true
  runner:
    name: devpush_runner
