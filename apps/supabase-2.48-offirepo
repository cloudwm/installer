#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Ensure PATH includes where the Supabase CLI will land on Debian/Ubuntu
export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
export HOME="${HOME:-/root}"

# Source shared helpers
if [ -f "$ROOT_DIR/include/startup.sh" ]; then
  . "$ROOT_DIR/include/startup.sh"
  
else
  echo "‚ùå Missing $ROOT_DIR/include/startup.sh ‚Äî aborting."
  exit 1
fi

RUNTIME_DIR="/etc/supabase"
RUNTIME_ENV="$RUNTIME_DIR/runtime.env"
mkdir -p "$RUNTIME_DIR"

rootDir="$(rootDir)"
updateStatus="$rootDir/include/updateInstallStatus.sh"
HTML_PATH="/var/www/html/index.html"
LOG_PATH="/var/log/supabase-install.log"
INSTALL_DIR="$HOME/supabase-local"
PROJECT_NAME="local-supabase-app"
SUPABASE_VERSION="2.48.3"
DOMAIN_NAME="$(hostname -I | awk '{print $1}' | tr '.' '-')".cloud-xip.com

log() {
    local msg="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') $msg" | tee -a "$LOG_PATH"
}

system_setup() {
    log "üîß Updating system and installing dependencies..."
    apt-get update -y
    apt-get install -y curl wget git docker.io docker-compose jq nginx certbot python3-certbot-nginx
    systemctl enable docker nginx
    systemctl start docker nginx
}

configure_firewall() {
    log "üß± Configuring firewall for Supabase..."
    ufw --force enable

    # Supabase stack ports
    ufw allow 80/tcp     # HTTP
    ufw allow 443/tcp    # HTTPS
    ufw allow 5432/tcp   # PostgreSQL
    ufw allow 5433/tcp   # PostgREST
    ufw allow 5434/tcp   # Realtime
    ufw allow 5435/tcp   # Storage
    ufw allow 5436/tcp   # Edge Functions
    ufw allow 54321/tcp  # API (Kong)
    ufw allow 54322/tcp  # Database
    ufw allow 54323/tcp  # Studio

    ufw reload
    log "‚úÖ Firewall rules applied successfully."
}

install_supabase_cli() {
    local ARCH
    ARCH=$(uname -m)
    [[ "$ARCH" == "aarch64" ]] && ARCH="arm64" || ARCH="amd64"

    local DEB_FILE="supabase_${SUPABASE_VERSION}_linux_${ARCH}.deb"
    local URL="https://github.com/supabase/cli/releases/download/v${SUPABASE_VERSION}/${DEB_FILE}"

    log "‚¨áÔ∏è  Downloading Supabase CLI v${SUPABASE_VERSION}..."
    wget -q -O "/tmp/${DEB_FILE}" "$URL"

    log "üì¶ Installing Supabase CLI..."
    
    # Wait for dpkg/apt locks (max 5 minutes)
    local waited=0
    while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || \
          fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
          fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
        if (( waited >= 300 )); then
            log "‚ùå Timed out waiting for package manager lock. Another process (e.g., unattended-upgrades) is blocking installation."
            return 1
        fi
        log "‚è≥ Waiting for package manager to finish (lock held)..."
        sleep 5
        (( waited += 5 ))
    done

    # Once lock is released, proceed with installation
    if dpkg -i "/tmp/${DEB_FILE}" >/dev/null 2>&1; then
        log "‚úÖ Supabase CLI installed successfully."
    else
        log "‚öôÔ∏è dpkg dependency fix in progress..."
        apt-get install -f -y >/dev/null 2>&1
    fi

    # Validate installation
    if ! command -v supabase &>/dev/null; then
        log "‚ùå Supabase CLI installation failed after resolving dependencies."
        return 1
    fi

    log "‚úÖ Supabase CLI installed and verified."
}

setup_project() {
    log "üìÅ Setting up Supabase project at ${INSTALL_DIR}/${PROJECT_NAME}..."
    mkdir -p "${INSTALL_DIR}/${PROJECT_NAME}"
    cd "${INSTALL_DIR}/${PROJECT_NAME}"

    if [ ! -f "supabase/config.toml" ]; then
        log "üöÄ Initializing Supabase project..."
        yes "N" | supabase init >/dev/null 2>&1 || true
    else
        log "‚ÑπÔ∏è  Supabase project already initialized."
    fi
}

_kv_upsert() {
	local k="$1" v="$2"
	local f="$RUNTIME_ENV"
	touch "$f"
	v_escaped=$(printf '%s' "$v" | sed 's/"/\\"/g')
	
	if grep -q "^${k}=" "$f"; then
		sed -i -E "s|^${k}=.*|${k}=\"${v_escaped}\"|" "$f"
	else
		echo "${k}=\"${v_escaped}\"" >> "$f"
	fi
}

start_supabase() {
    log "‚ñ∂Ô∏è  Starting Supabase stack..."
    "$updateStatus" "$HTML_PATH" -ap "üß© Starting Supabase and pulling Docker images..."

    : > "$RUNTIME_ENV"   # clear previous values

    declare -A active_images

    # stream start + parse both image pulls and the final banner
    while IFS= read -r line; do
        echo "$line" | tee -a "$LOG_PATH"

        # ----- image pull progress (kept from your version) -----
        if echo "$line" | grep -q "Pulling from"; then
            version=$(echo "$line" | sed -E 's/^([^:]+):.*/\1/')
            imageName=$(echo "$line" | sed -E 's/.*Pulling from[[:space:]]*([^[:space:]]+).*/\1/')
            version=$(echo "$version" | sed 's/[^a-zA-Z0-9._-]//g')
            imageName=$(echo "$imageName" | sed 's/[^a-zA-Z0-9._/-]//g')
            active_images["$imageName:$version"]=1
            "$updateStatus" "$HTML_PATH" -ap "üêã Pulling image: $imageName:$version..."
            continue
        fi

        if echo "$line" | grep -Eq '^Digest:[[:space:]]*sha256:[a-f0-9]{64}'; then
            for key in "${!active_images[@]}"; do
                "$updateStatus" "$HTML_PATH" -ap "‚úÖ Finished pulling: $key"
                unset 'active_images[$key]'
            done
            continue
        fi

        if echo "$line" | grep -q "Pulling image:"; then
            version=$(echo "$line" | sed -E 's/.*Pulling image:[[:space:]]*([^[:space:]:]+).*/\1/')
            version=$(echo "$version" | sed 's/[^a-zA-Z0-9._-]//g')
            active_images["$version"]=1
            "$updateStatus" "$HTML_PATH" -ap "üêã Pulling image version: $version"
            continue
        fi

        # ----- parse the final startup banner to capture real creds -----
        if echo "$line" | grep -qE '^\s*API URL:'; then
            _kv_upsert API_URL "${line#*: }"
        elif echo "$line" | grep -qE '^\s*GraphQL URL:'; then
            _kv_upsert GRAPHQL_URL "${line#*: }"
        elif echo "$line" | grep -qE '^\s*S3 Storage URL:'; then
            _kv_upsert S3_STORAGE_URL "${line#*: }"
        elif echo "$line" | grep -qE '^\s*MCP URL:'; then
            _kv_upsert MCP_URL "${line#*: }"
        elif echo "$line" | grep -qE '^\s*Database URL:'; then
            _kv_upsert DB_URL "${line#*: }"
        elif echo "$line" | grep -qE '^\s*Studio URL:'; then
            _kv_upsert STUDIO_URL "${line#*: }"
        elif echo "$line" | grep -qE '^\s*Mailpit URL:'; then
            _kv_upsert MAILPIT_URL "${line#*: }"
        elif echo "$line" | grep -qE '^\s*Publishable key:'; then
            _kv_upsert PUBLISHABLE_KEY "${line#*: }"
        elif echo "$line" | grep -qE '^\s*Secret key:'; then
            _kv_upsert SECRET_KEY "${line#*: }"
        elif echo "$line" | grep -qE '^\s*S3 Access Key:'; then
            _kv_upsert S3_ACCESS_KEY "${line#*: }"
        elif echo "$line" | grep -qE '^\s*S3 Secret Key:'; then
            _kv_upsert S3_SECRET_KEY "${line#*: }"
        elif echo "$line" | grep -qE '^\s*S3 Region:'; then
            _kv_upsert S3_REGION "${line#*: }"
        fi
    done < <(supabase start 2>&1)
	
	# Enable automatic restart for all containers
	docker ps -q | xargs -r docker update --restart unless-stopped
	log "üîÅ Enabled Docker auto-restart for Supabase containers."
	
    log "‚úÖ Supabase started successfully."
    "$updateStatus" "$HTML_PATH" -ap "‚úÖ Supabase stack started successfully."
}

configure_nginx() {
    log "üåÄ Configuring Nginx reverse proxy..."
    local CONF="/etc/nginx/sites-available/supabase.conf"
    cat > "$CONF" <<'EOF'
server {
    listen 80;
    server_name __DOMAIN_NAME__;

    # Studio UI
    location / {
        proxy_pass http://127.0.0.1:54323;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "upgrade";
        proxy_set_header Upgrade $http_upgrade;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
    }

    # Kong gateway
    location ~ ^/(auth|rest|storage|graphql|functions|realtime)/ {
        proxy_pass http://127.0.0.1:54321;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "upgrade";
        proxy_set_header Upgrade $http_upgrade;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
    }

    client_max_body_size 100M;
}
EOF
    sed -i "s|__DOMAIN_NAME__|${DOMAIN_NAME}|g" "$CONF"
    ln -sf "$CONF" /etc/nginx/sites-enabled/supabase.conf
    nginx -t
    systemctl reload nginx
    log "‚úÖ Nginx reverse proxy configured."
}

obtain_ssl() {
    log "üîí Attempting to obtain Let's Encrypt SSL certificate..."
    if certbot --nginx -d "$DOMAIN_NAME" --non-interactive --agree-tos -m "admin@${DOMAIN_NAME}" --redirect -v; then
        log "‚úÖ Let's Encrypt SSL certificate active at https://${DOMAIN_NAME}"
    else
        log "‚ö†Ô∏è Let's Encrypt failed, falling back to self-signed certificate..."
        mkdir -p /etc/ssl/supabase
        openssl req -x509 -newkey rsa:2048 -nodes -keyout /etc/ssl/supabase/key.pem -out /etc/ssl/supabase/cert.pem -days 365 \
            -subj "/CN=${DOMAIN_NAME}" >/dev/null 2>&1

        local CONF="/etc/nginx/sites-available/supabase.conf"
        cat > "$CONF" <<EOF
server {
    listen 443 ssl;
    server_name ${DOMAIN_NAME};

    ssl_certificate /etc/ssl/supabase/cert.pem;
    ssl_certificate_key /etc/ssl/supabase/key.pem;

    location / {
        proxy_pass http://127.0.0.1:54323;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location ~ ^/(auth|rest|storage|graphql|functions|realtime)/ {
        proxy_pass http://127.0.0.1:54321;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    client_max_body_size 100M;
}
EOF
        ln -sf "$CONF" /etc/nginx/sites-enabled/supabase.conf
        nginx -t && systemctl reload nginx
        log "‚úÖ Self-signed certificate configured for https://${DOMAIN_NAME}"
    fi
}

post_install_configuration() {
    log "üß© Running post-installation configuration..."
    local CONFIG_FILE="${INSTALL_DIR}/${PROJECT_NAME}/supabase/config.toml"

    if [ ! -f "$CONFIG_FILE" ]; then
        log "‚ùå config.toml not found. Skipping post-install configuration."
        return
    fi

    # Patch Studio API URL
    sed -i -E 's|^[[:space:]]*api_url[[:space:]]*=.*|api_url = "https://'"${DOMAIN_NAME}"'"|g' "$CONFIG_FILE"

    # Patch Auth site_url + redirect URLs
    sed -i -E 's|^[[:space:]]*site_url[[:space:]]*=.*|site_url = "https://'"${DOMAIN_NAME}"'"|g' "$CONFIG_FILE"
    sed -i -E 's|^\s*additional_redirect_urls\s*=.*|additional_redirect_urls = ["https://'"${DOMAIN_NAME}"'"]|g' "$CONFIG_FILE"

    # Set Supabase Studio theme to 'system'
    if grep -q "^\[studio\]" "$CONFIG_FILE"; then
        sed -i '/^\[studio\]/a theme = "system"' "$CONFIG_FILE"
    fi

    log "‚úÖ Updated studio.api_url, auth.site_url, and set theme=system"

    # Restart stack to apply config
    cd "${INSTALL_DIR}/${PROJECT_NAME}"
    supabase stop >/dev/null 2>&1 || true
    supabase start >/dev/null 2>&1 || true

    systemctl reload nginx
    log "‚úÖ Post-installation configuration applied and services reloaded."
}

verify_connection() {
    log "üß† Verifying Supabase Studio availability (HTTPS)..."
    for i in {1..10}; do
        if curl -kfsS "https://${DOMAIN_NAME}/" >/dev/null 2>&1; then
            log "‚úÖ Supabase Studio reachable at https://${DOMAIN_NAME}"
            return
        fi
        log "‚è≥ Waiting for Supabase Studio... (attempt $i/10)"
        sleep 5
    done
    log "‚ùå Supabase Studio not reachable after setup."
    exit 1
}

configure_motd() {
  log "üßæ Configuring system MOTD with Supabase info..."
  chmod -x /etc/update-motd.d/* 2>/dev/null || true
  rm -f /etc/motd 2>/dev/null

  # read persisted values (fallbacks if missing)
  [ -f "$RUNTIME_ENV" ] && set -a && . "$RUNTIME_ENV" && set +a

  : "${API_URL:=http://127.0.0.1:54321}"
  : "${GRAPHQL_URL:=${API_URL%/}/graphql/v1}"
  : "${DB_URL:=postgresql://postgres:postgres@127.0.0.1:54322/postgres}"
  : "${STUDIO_URL:=http://127.0.0.1:54323}"
  : "${MAILPIT_URL:=http://127.0.0.1:54324}"
  : "${PUBLISHABLE_KEY:=<unknown>}"
  : "${SECRET_KEY:=<unknown>}"
  : "${S3_ACCESS_KEY:=<unknown>}"
  : "${S3_SECRET_KEY:=<unknown>}"
  : "${S3_REGION:=local}"

  cat > /etc/motd <<EOM
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üöÄ Started Supabase Local Development Setup
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

         API URL: ${API_URL}
     GraphQL URL: ${GRAPHQL_URL}
  S3 Storage URL: ${API_URL%/}/storage/v1/s3
         MCP URL: ${API_URL%/}/mcp
    Database URL: ${DB_URL}
      Studio URL: ${STUDIO_URL}
     Mailpit URL: ${MAILPIT_URL}
 Publishable key: ${PUBLISHABLE_KEY}
      Secret key: ${SECRET_KEY}
   S3 Access Key: ${S3_ACCESS_KEY}
   S3 Secret Key: ${S3_SECRET_KEY}
       S3 Region: ${S3_REGION}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí° To manage Supabase:
   cd ${INSTALL_DIR}/${PROJECT_NAME}
   supabase stop     # Stop all services
   supabase start    # Start again
   
üßπ To remove this message:
   sudo rm -f /etc/motd && sudo chmod +x /etc/update-motd.d/*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
EOM

  chmod 644 /etc/motd
  log "‚úÖ Custom MOTD installed at /etc/motd with live values."
}

wait_for_package_lock() {
    log "‚è≥ Checking for existing apt/dpkg operations..."
    local waited=0
    local max_wait=600  # 10 minutes

    while pgrep -x apt >/dev/null || pgrep -x apt-get >/dev/null || pgrep -x dpkg >/dev/null || \
          fuser /var/lib/dpkg/lock >/dev/null 2>&1 || \
          fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
          fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do

        if (( waited == 0 )); then
            log "üîí Another package process is running (likely unattended-upgrades). Waiting for lock to release..."
        fi

        if (( waited >= max_wait )); then
            log "‚ùå Timed out after 10 minutes waiting for package lock. Aborting."
            exit 1
        fi

        sleep 5
        (( waited += 5 ))
    done

    log "‚úÖ Package manager is free. Proceeding with installation."
}

main() {
	"$updateStatus" "$HTML_PATH" -ap "üß© Checking for active package managers..."
	wait_for_package_lock
	"$updateStatus" "$HTML_PATH" -ap "üß© Installing prerequisites..."
    system_setup
	"$updateStatus" "$HTML_PATH" -ap "üß© Installing Supabase CLI..."
    install_supabase_cli
    "$updateStatus" "$HTML_PATH" -ap "üß© Setting up project..."
	setup_project
    "$updateStatus" "$HTML_PATH" -ap "üß© Starting Supabase..."
	start_supabase
    "$updateStatus" "$HTML_PATH" -ap "üß© Configuring web access..."
	configure_nginx
    obtain_ssl
    "$updateStatus" "$HTML_PATH" -ap "üß© Performing post installation configurations..."
	post_install_configuration
	"$updateStatus" "$HTML_PATH" -ap "üß© Verifying connection..."
    verify_connection
	configure_motd
	
    log "üéâ Supabase is ready and secured!"
    log "üåê URL: https://${DOMAIN_NAME}"
    log "üõë Stop: cd ${INSTALL_DIR}/${PROJECT_NAME} && supabase stop"
    log "üîÑ Restart: cd ${INSTALL_DIR}/${PROJECT_NAME} && supabase start"
	
	"$updateStatus" "$HTML_PATH" -sr
    "$updateStatus" "$HTML_PATH" -ur "Supabase is running on https://${DOMAIN_NAME}"
    "$updateStatus" "$HTML_PATH" -tr "https://${DOMAIN_NAME}"
}

main "$@"
