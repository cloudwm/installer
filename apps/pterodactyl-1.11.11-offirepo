if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

echo "Installing Pterodactyl Panel 1.0-develop with Wings using Docker on Ubuntu" | log

export DEBIAN_FRONTEND="noninteractive"
export PYTHONWARNINGS="ignore"

# Install prerequisites
echo "Installing Docker and dependencies" | log
sudo apt update
sudo apt install -y curl ca-certificates
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
waitOrStop 0 "Docker installation failed"

sudo usermod -aG docker $USER
sudo systemctl enable --now docker

# Install Docker Compose Plugin
echo "Installing Docker Compose" | log
sudo apt install -y docker-compose-plugin
waitOrStop 0 "Docker Compose installation failed"

# Pre-pull Docker images
echo "Pre-pulling Docker images" | log
sudo docker pull mariadb:10.11
sudo docker pull redis:alpine
sudo docker pull ghcr.io/pterodactyl/panel:v1.11.11
sudo docker pull ghcr.io/pterodactyl/wings:latest
sudo docker pull nginx:alpine

# Create directories
echo "Creating directories" | log
sudo mkdir -p /var/www/pterodactyl /etc/pterodactyl /var/lib/pterodactyl/volumes /var/lib/pterodactyl/mysql
sudo chmod -R 755 /var/www/pterodactyl /etc/pterodactyl /var/lib/pterodactyl

# Install certbot BEFORE creating nginx config
echo "Installing certbot" | log
sudo apt install -y certbot
waitOrStop 0 "Certbot installation failed"

# Check if domain resolves to this server
echo "Checking DNS resolution for ${CWM_DOMAIN}" | log
SERVER_IP=$(curl -s ifconfig.me || curl -s icanhazip.com)
DOMAIN_IP=$(dig +short ${CWM_DOMAIN} | tail -n1)

echo "Server IP: $SERVER_IP" | log
echo "Domain resolves to: $DOMAIN_IP" | log

# Generate Let's Encrypt certificate
echo "üîí Obtaining Let's Encrypt SSL certificate..." | log

# Try to get certificate
if certbot certonly --standalone -d "${CWM_DOMAIN}" \
    --non-interactive --agree-tos \
    --email "admin@${CWM_DOMAIN}" \
    --http-01-port 80 \
    --preferred-challenges http; then
    echo "‚úÖ SSL certificate obtained successfully" | log
    USE_LETSENCRYPT=true
fi

# Verify certificate files exist
if [ ! -f "/etc/letsencrypt/live/${CWM_DOMAIN}/fullchain.pem" ] || [ ! -f "/etc/letsencrypt/live/${CWM_DOMAIN}/privkey.pem" ]; then
    echo "‚ùå SSL certificate files not found!" | log
    waitOrStop 0 "SSL certificate generation failed"
fi

echo "‚úÖ SSL certificate files verified" | log

# Generate random APP_KEY
APP_KEY=$(openssl rand -base64 32)

# Create Docker Compose file
echo "Creating Docker Compose configuration" | log
cat << EOF > /var/www/pterodactyl/docker-compose.yml
version: '3.8'

services:
  mariadb:
    image: mariadb:10.11
    container_name: pterodactyl_mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${ADMINPASSWORD}
      MYSQL_DATABASE: panel
      MYSQL_USER: pterodactyl
      MYSQL_PASSWORD: ${ADMINPASSWORD}
    volumes:
      - /var/lib/pterodactyl/mysql:/var/lib/mysql
    networks:
      - pterodactyl
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  redis:
    image: redis:alpine
    container_name: pterodactyl_redis
    restart: unless-stopped
    networks:
      - pterodactyl
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  panel:
    image: ghcr.io/pterodactyl/panel:latest
    container_name: pterodactyl_panel
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      APP_URL: "https://${CWM_DOMAIN}"
      APP_TIMEZONE: "UTC"
      APP_SERVICE_AUTHOR: "admin@${CWM_DOMAIN}"
      APP_ENV: "production"
      APP_DEBUG: "false"
      APP_KEY: "base64:${APP_KEY}"
      DB_HOST: "mariadb"
      DB_PORT: "3306"
      DB_DATABASE: "panel"
      DB_USERNAME: "pterodactyl"
      DB_PASSWORD: "${ADMINPASSWORD}"
      CACHE_DRIVER: "redis"
      SESSION_DRIVER: "redis"
      QUEUE_CONNECTION: "redis"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      MAIL_DRIVER: "smtp"
      MAIL_HOST: "localhost"
      MAIL_PORT: "25"
      MAIL_FROM: "noreply@${CWM_DOMAIN}"
    volumes:
      - /var/www/pterodactyl:/app/var/
    networks:
      - pterodactyl
    ports:
      - "127.0.0.1:8080:80"

  nginx:
    image: nginx:alpine
    container_name: pterodactyl_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - panel
    networks:
      - pterodactyl

  wings:
    image: ghcr.io/pterodactyl/wings:latest
    container_name: pterodactyl_wings
    restart: unless-stopped
    privileged: true
    ports:
      - "8443:443"
      - "2022:2022"
    tty: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/
      - /etc/pterodactyl/:/etc/pterodactyl/
      - /var/lib/pterodactyl/:/var/lib/pterodactyl/
      - /tmp/pterodactyl/:/tmp/pterodactyl/
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - pterodactyl

networks:
  pterodactyl:
    name: pterodactyl_nw
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16
          gateway: 172.19.0.1
EOF

# Create NGINX configuration
echo "Creating NGINX configuration" | log
cat << 'EOF' > /var/www/pterodactyl/nginx.conf
server {
    listen 80;
    server_name _;

    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name _;

    ssl_certificate /etc/letsencrypt/live/CWM_DOMAIN_PLACEHOLDER/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/CWM_DOMAIN_PLACEHOLDER/privkey.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384";
    ssl_prefer_server_ciphers off;

    client_max_body_size 100M;
    client_body_timeout 120s;

    location / {
        proxy_pass http://panel:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_redirect off;
        proxy_buffering off;
    }
}
EOF

# Replace placeholder with actual domain
sed -i "s|CWM_DOMAIN_PLACEHOLDER|${CWM_DOMAIN}|g" /var/www/pterodactyl/nginx.conf

# Start Docker Compose services
echo "Starting Docker Compose services" | log
cd /var/www/pterodactyl
sudo docker compose up -d
waitOrStop 0 "Failed to start Docker Compose services"

# Wait for MariaDB
echo "Waiting for MariaDB to be ready" | log
for i in {1..60}; do
    if sudo docker exec pterodactyl_mariadb mysqladmin ping -h localhost -u root -p${ADMINPASSWORD} >/dev/null 2>&1; then
        echo "‚úÖ MariaDB is ready" | log
        break
    fi
    echo "Waiting for MariaDB ($i/60)..." | log
    sleep 5
done

if [ $i -eq 60 ]; then
    echo "‚ùå MariaDB failed to start" | log
    sudo docker compose logs mariadb
    waitOrStop 0 "MariaDB startup timeout"
fi

# Wait for panel to be ready
echo "Waiting for Panel to be ready" | log
sleep 30

# Run migrations
echo "Running database migrations" | log
sudo docker exec pterodactyl_panel php artisan migrate --seed --force 2>&1 | grep -v "pkg_resources\|UserWarning\|CRIT Server" || true
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è Migration may have issues, checking logs..." | log
    sudo docker logs pterodactyl_panel --tail 20
fi

# Wait a bit more for panel to stabilize
sleep 10

# Verify panel is responding
echo "Verifying panel is accessible" | log
PANEL_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 2>/dev/null || echo "000")
if [ "$PANEL_CHECK" = "200" ] || [ "$PANEL_CHECK" = "302" ]; then
    echo "‚úÖ Panel is responding (HTTP $PANEL_CHECK)" | log
else
    echo "‚ö†Ô∏è Panel may not be ready yet (HTTP $PANEL_CHECK), waiting..." | log
    sleep 20
    PANEL_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 2>/dev/null || echo "000")
    if [ "$PANEL_CHECK" = "200" ] || [ "$PANEL_CHECK" = "302" ]; then
        echo "‚úÖ Panel is now responding (HTTP $PANEL_CHECK)" | log
    else
        echo "‚ùå Panel is not responding. Check logs: sudo docker logs pterodactyl_panel" | log
    fi
fi

# Create admin user
echo "Creating admin user" | log
sudo docker exec pterodactyl_panel php artisan p:user:make \
    --email="admin@${CWM_DOMAIN}" \
    --username=admin \
    --name-first=Admin \
    --name-last=User \
    --password="${ADMINPASSWORD}" \
    --admin=1 2>&1 | grep -v "pkg_resources\|UserWarning\|CRIT Server" || truepassword="${ADMINPASSWORD}" \
    --admin=1

# Create location
echo "Creating default location" | log
LOCATION_OUTPUT=$(sudo docker exec pterodactyl_panel php artisan p:location:make \
    --short=default \
    --long="Default Location" 2>&1 | grep -v "pkg_resources\|UserWarning\|CRIT Server")

LOCATION_ID=$(echo "$LOCATION_OUTPUT" | grep -oP 'ID: \K\d+' | head -1)

if [ -z "$LOCATION_ID" ]; then
    # Location might already exist, try to get it
    LOCATION_ID=1
    echo "Using location ID: $LOCATION_ID" | log
else
    echo "‚úÖ Location created with ID: $LOCATION_ID" | log
fi

# Create node and get configuration
echo "Creating Wings node automatically" | log
NODE_OUTPUT=$(sudo docker exec pterodactyl_panel php artisan p:node:make \
    --name="AutoNode" \
    --description="Automatically configured node" \
    --locationId=${LOCATION_ID} \
    --fqdn="${CWM_DOMAIN}" \
    --public=1 \
    --scheme="https" \
    --proxy=0 \
    --maintenance=0 \
    --maxMemory=4 \
    --overallocateMemory=0 \
    --maxDisk=30 \
    --overallocateDisk=0 \
    --uploadSize=100 \
    --daemonListeningPort=8443 \
    --daemonSFTPPort=2022 \
    --daemonBase="/var/lib/pterodactyl/volumes" 2>&1 | grep -v "pkg_resources\|UserWarning\|CRIT Server")

echo "$NODE_OUTPUT" | log

NODE_ID=1

echo "üîß Extracting Wings configuration from database (Node ID: ${NODE_ID})" | log
sleep 30  # Give DB time to commit

docker exec pterodactyl_panel php artisan p:node:configuration ${NODE_ID} > /etc/pterodactyl/config.yml

# Verify config is valid
if [ -s /etc/pterodactyl/config.yml ] && grep -q "token_id" /etc/pterodactyl/config.yml && grep -q "token:" /etc/pterodactyl/config.yml; then
    echo "‚úÖ Wings configuration extracted successfully!" | log
    sudo chmod 600 /etc/pterodactyl/config.yml

    # Fix Wings configuration for Docker networking
    echo "üîß Configuring Wings for Docker networking..." | log
    sed -i "s|remote:.*|remote: http://pterodactyl_panel:80|g" /etc/pterodactyl/config.yml
    sed -i "s|port: 8443|port: 443|g" /etc/pterodactyl/config.yml
    sed -i "s|enabled: false|enabled: true|g" /etc/pterodactyl/config.yml

    # Fix CORS configuration for browser access
    echo "üîß Configuring CORS for Wings..." | log
    if grep -q "allowed_origins: \[\]" /etc/pterodactyl/config.yml; then
        sed -i "s|allowed_origins: \[\]|allowed_origins:\n  - https://${CWM_DOMAIN}|g" /etc/pterodactyl/config.yml
    elif ! grep -q "allowed_origins:" /etc/pterodactyl/config.yml; then
        echo "allowed_origins:" >> /etc/pterodactyl/config.yml
        echo "  - https://${CWM_DOMAIN}" >> /etc/pterodactyl/config.yml
    fi

    echo "‚úÖ Wings configuration updated for Docker!" | log

    # Restart Wings with new config
    echo "üöÄ Restarting Wings with configuration..." | log
    sudo docker restart pterodactyl_wings
    sleep 15

    # Verify Wings is running and connected
    WINGS_STATUS=$(sudo docker ps --filter "name=pterodactyl_wings" --filter "status=running" -q)
    if [ -n "$WINGS_STATUS" ]; then
        WINGS_LOGS=$(sudo docker logs pterodactyl_wings --tail 10 2>&1)
        if echo "$WINGS_LOGS" | grep -q "Connected\|Listening\|Started"; then
            echo "‚úÖ Wings is running and connected to Panel!" | log
        else
            echo "‚ö†Ô∏è Wings started but check logs: sudo docker logs pterodactyl_wings" | log
        fi
    else
        echo "‚ö†Ô∏è Wings failed to start. Check logs: sudo docker logs pterodactyl_wings" | log
    fi

    descriptionAppend "‚úÖ Wings node automatically configured (Node ID: ${NODE_ID})"
    descriptionAppend "‚úÖ Wings is running and connected to Panel!"
else
    echo "‚ö†Ô∏è Could not extract config automatically, creating fallback..." | log

    # Fallback: Generate minimal config
    cat << EOF > /etc/pterodactyl/config.yml
# Auto-generated fallback config - Manual Panel configuration recommended
debug: false
uuid: $(uuidgen)
token_id: "manual-config-required"
token: "manual-config-required"
app:
  environment: production
EOF
    sudo chmod 600 /etc/pterodactyl/config.yml
    sudo docker restart pterodactyl_wings

    descriptionAppend "‚ö†Ô∏è Wings needs manual configuration:"
    descriptionAppend "1. Admin ‚Üí Nodes ‚Üí AutoNode ‚Üí Configuration"
    descriptionAppend "2. Copy config to /etc/pterodactyl/config.yml"
    descriptionAppend "3. sudo docker restart pterodactyl_wings"
fi

# Setting up games ports alloactions
docker exec pterodactyl_panel php artisan tinker --execute="
\$node = \Pterodactyl\Models\Node::where('name', 'AutoNode')->first();
if (\$node) {
    \$ip = '${SERVER_IP}';
    \$alias = 'cloud-xip.com';
    \$count = 0;

    // SRCDS (CS:GO/CS2/TF2)
    foreach (range(27015, 27025) as \$port) {
        \Pterodactyl\Models\Allocation::firstOrCreate([
            'node_id' => \$node->id,
            'ip' => \$ip,
            'port' => \$port,
        ], ['ip_alias' => \$alias]);
        \$count++;
    }

    // Minecraft
    foreach (range(25566, 25575) as \$port) {
        \Pterodactyl\Models\Allocation::firstOrCreate([
            'node_id' => \$node->id,
            'ip' => \$ip,
            'port' => \$port,
        ], ['ip_alias' => \$alias]);
        \$count++;
    }

    // Rust
    foreach (range(28015, 28025) as \$port) {
        \Pterodactyl\Models\Allocation::firstOrCreate([
            'node_id' => \$node->id,
            'ip' => \$ip,
            'port' => \$port,
        ], ['ip_alias' => \$alias]);
        \$count++;
    }

    echo \"Created {\$count} allocations\";
}
"

# Set up SSL auto-renewal
echo "Setting up SSL auto-renewal" | log
(crontab -l 2>/dev/null; echo "0 0,12 * * * certbot renew --quiet --deploy-hook 'docker restart pterodactyl_nginx pterodactyl_wings'") | crontab -

echo "Adding descriptions" | log
descriptionAppend "‚úÖ Pterodactyl Panel Installation Complete!"
descriptionAppend " "
descriptionAppend "Panel URL: https://${CWM_DOMAIN}"
descriptionAppend "Admin Username: admin@${CWM_DOMAIN}"
descriptionAppend "Admin Password: ${ADMINPASSWORD}"
descriptionAppend " "
descriptionAppend " "
descriptionAppend "Quick Start:"
descriptionAppend "1. Access panel at https://${CWM_DOMAIN}"
descriptionAppend "2. Create a server from Admin panel"
descriptionAppend "3. Allocate ports and resources"
descriptionAppend "4. Start your game server!"
descriptionAppend " "
descriptionAppend "Important Files:"
descriptionAppend "  ‚Ä¢ Docker Compose: /var/www/pterodactyl/docker-compose.yml"
descriptionAppend "  ‚Ä¢ Wings Config: /etc/pterodactyl/config.yml"
descriptionAppend "  ‚Ä¢ SSL Certificates: /etc/letsencrypt/live/${CWM_DOMAIN}/"
descriptionAppend "  ‚Ä¢ Server Data: /var/lib/pterodactyl/volumes/"
descriptionAppend " "
descriptionAppend "Useful Commands:"
descriptionAppend "  cd /var/www/pterodactyl && sudo docker compose ps       # Check status"
descriptionAppend "  sudo docker logs -f pterodactyl_panel                   # Panel logs"
descriptionAppend "  sudo docker logs -f pterodactyl_wings                   # Wings logs"
descriptionAppend "  cd /var/www/pterodactyl && sudo docker compose restart  # Restart all"
descriptionAppend "  sudo certbot renew --dry-run                            # Test SSL renewal"

tagScript success
