#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

rootDir="$(rootDir)"
updateStatus="$rootDir/include/updateInstallStatus.sh"
WEB_PATH="/var/www/html"
HTML_PATH="/var/www/html/index.html"
MACHINE_IP=$(hostname -I | awk '{print $1}')
DOMAIN_NAME="$(echo "$MACHINE_IP" | tr '.' '-')".cloud-xip.com

log_machine_info() {
    echo "Machine IP: $MACHINE_IP" | log
    echo "Domain: $DOMAIN_NAME" | log
}

prepare_env() {
    echo "Opening UFW port 8080..." | log
    ufw allow 8080/tcp

    echo "Installing python3-venv and pip..." | log
    "$updateStatus" "$HTML_PATH" -ap "Installing python3-venv and pip..."
    apt update
    apt install -y python3-venv python3-pip
}

create_virtualenv() {
    "$updateStatus" "$HTML_PATH" -ap "Creating environment..."
    VENV_DIR="$HOME/open-webui-venv"
    if [ ! -d "$VENV_DIR" ]; then
        python3 -m venv "$VENV_DIR"
    fi
    source "$VENV_DIR/bin/activate"
}

install_openwebui() {
    echo "Installing Open-WebUI..." | log
    "$updateStatus" "$HTML_PATH" -ap "Installing Open-WebUI (might take some time)..."
    pip install --upgrade pip
    pip install --upgrade open-webui
}

create_service() {
    SERVICE_FILE="/etc/systemd/system/open-webui.service"
    if [ ! -f "$SERVICE_FILE" ]; then
        echo "Creating systemd service at $SERVICE_FILE ..." | log
        "$updateStatus" "$HTML_PATH" -ap "Creating service..."
        tee "$SERVICE_FILE" > /dev/null <<EOF
[Unit]
Description=Open WebUI
After=network.target

[Service]
Type=simple
User=$USER
Group=$USER
WorkingDirectory=$HOME
ExecStart=$HOME/open-webui-venv/bin/open-webui serve --host 0.0.0.0 --port 8080
Restart=always
RestartSec=5
Environment=PATH=$HOME/open-webui-venv/bin:/usr/bin:/bin

[Install]
WantedBy=multi-user.target
EOF
        systemctl daemon-reload
        systemctl enable open-webui.service
    fi
}

start_service() {
    echo "Starting Open WebUI service..." | log
    "$updateStatus" "$HTML_PATH" -ap "Starting Open WebUI service..."
    systemctl restart open-webui.service
}

setup_nginx_ssl() {
    echo "Installing nginx and certbot..." | log
    apt install -y nginx python3-certbot-nginx
    ufw allow 'Nginx Full'

    NGINX_CONF="/etc/nginx/sites-available/open-webui.conf"
    echo "Creating nginx config for $DOMAIN_NAME ..." | log
    cat > "$NGINX_CONF" <<EOF
server {
    listen 80;
    server_name ${DOMAIN_NAME};

    location / {
        proxy_pass         http://127.0.0.1:8080;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade \$http_upgrade;
        proxy_set_header   Connection 'upgrade';
        proxy_set_header   Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF
	
	systemctl stop apache2
	systemctl disable apache2
	
    ln -sf "$NGINX_CONF" /etc/nginx/sites-enabled/open-webui.conf
    nginx -t && systemctl reload nginx

    echo "Requesting Let's Encrypt certificate for $DOMAIN_NAME ..." | log
    certbot --nginx -d "$DOMAIN_NAME" --non-interactive --agree-tos -m "admin@${DOMAIN_NAME}" --redirect
    echo "✅ HTTPS enabled: https://${DOMAIN_NAME}" | log
}

health_check_and_cleanup() {
    echo "Checking if Open WebUI responds on port 8080..." | log
    "$updateStatus" "$HTML_PATH" -ap "Checking if Open WebUI responds on port 8080..."
    MAX_WAIT=60
    START=$(date +%s)
    while true; do
        if curl -s http://localhost:8080/ >/dev/null 2>&1; then
            echo "✅ Open WebUI is ready at https://${DOMAIN_NAME}" | log
            "$updateStatus" "$HTML_PATH" -sr
            "$updateStatus" "$HTML_PATH" -ur "✅ Open WebUI is ready at https://${DOMAIN_NAME}"
            "$updateStatus" "$HTML_PATH" -tr "https://${DOMAIN_NAME}"

            sleep 10
            echo "Installation complete. Stopping and removing Apache2..." | log
            systemctl stop apache2 || true
            systemctl disable apache2 || true
            apt purge -y apache2 apache2-utils apache2-bin apache2.2-common || true
            apt autoremove -y
            apt clean
            echo "Apache2 service stopped and removed." | log
            break
        fi
        if (( $(date +%s) - START > MAX_WAIT )); then
            echo "❌ Timed out after ${MAX_WAIT}s. Check: journalctl -u open-webui"
            exit 1
        fi
        sleep 2
    done
}

main() {
    log_machine_info
    prepare_env
    create_virtualenv
    install_openwebui
    create_service
    start_service
    setup_nginx_ssl
    health_check_and_cleanup
    tag Script.success
}

main
