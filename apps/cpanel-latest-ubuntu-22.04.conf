#!/bin/bash
set -euo pipefail

LOG_PATH="/var/log/cpanel-install.log"
APPDIR="/opt/cpanel"
CPANEL_INSTALLER_URL="https://securedownloads.cpanel.net/latest"
INSTALLER_OUTPUT="latest"
START_TIME=$(date +%s)

# Source startup if available
if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

nav_to_appdir() {
    if [ ! -d "$APPDIR" ]; then
        echo "Creating directory ${APPDIR}..." | log
        mkdir -p "$APPDIR" || { echo "Failed to create ${APPDIR}" | log; exit 1; }
    fi

    echo "Navigating to ${APPDIR}..." | log
    cd "$APPDIR" || { echo "Failed to change directory to ${APPDIR}" | log; exit 1; }

    if [ "$(pwd)" != "$APPDIR" ]; then
        echo "Error: Current directory ($(pwd)) does not match ${APPDIR}." | log
        exit 1
    fi
    echo "Successfully navigated to ${APPDIR}." | log
}

disable_firewall() {
    echo "Disabling firewall..." | log
    iptables-save > ~/firewall.rules
    systemctl stop ufw.service || true
    systemctl disable ufw.service || true
}

install_dependencies() {
    echo "Installing dependencies..." | log
    apt -y install perl perl-base chrony curl
}

set_hostname() {
    echo "Configuring hostname..." | log
    local ip
    ip=$(hostname -I | awk '{print $1}')
    if [[ -z "$ip" ]]; then
        echo "No IP address found!" | log
        exit 1
    fi
    local formatted_ip
    formatted_ip=$(echo "$ip" | tr '.' '-')
    local new_hostname="${formatted_ip}.cloud-xip.com"
    CWM_DOMAIN="${new_hostname}"
    sudo hostnamectl set-hostname "$new_hostname"
    echo "Hostname set to: $new_hostname" | log
}

add_rdate_hosts_entry() {
    echo "Adding rdate host entry..." | log
    local host_entry="127.0.0.1   rdate.cpanel.net"
    if grep -E -q '127\.0\.0\.1\s+.*rdate\.cpanel\.net' /etc/hosts; then
        echo "Entry for rdate.cpanel.net already exists in /etc/hosts." | log
    else
        echo "$host_entry" | sudo tee -a /etc/hosts >/dev/null && \
            echo "Entry added successfully." | log || \
            echo "Failed to add entry. Please check your permissions." | log
    fi
}

sync_time() {
    echo "Syncing time..." | log
    chronyc tracking
    chronyc makestep

    echo "Moving rdate file..." | log
    mv /usr/sbin/rdate /usr/sbin/rdate.orig || true

    echo "Creating dummy rdate..." | log
    cat << 'EOF' | sudo tee /usr/sbin/rdate >/dev/null
#!/bin/bash
# Dummy rdate command for cPanel installation workaround.
exit 0
EOF
    chmod +x /usr/sbin/rdate
}

add_gpg_key() {
    echo "Adding GPG Key..." | log
    local key="A8D3785C"
    local ks="hkp://keyserver.ubuntu.com:80"
    if gpg --batch --no-tty --keyserver "$ks" --recv-keys "$key"; then
        echo "Successfully downloaded GPG key $key." | log
    else
        echo "Failed to download GPG key $key using --recv-keys. Trying search method..." | log
        if printf "1\n" | gpg --batch --no-tty --keyserver "$ks" --search-keys "$key"; then
            echo "Successfully imported GPG key $key using search method." | log
        else
            echo "Error: Unable to download GPG key $key from $ks." | log
        fi
    fi
}

import_mysql_gpg_keys() {
    echo "Importing MySQL GPG keys..." | log
    local keys=("A8D3785C" "3A79BD29" "5072E1F5" "C74CD1D8")
    local keyservers=("hkps://keyserver.ubuntu.com" "hkps://keys.openpgp.org")
    for key in "${keys[@]}"; do
        local imported=0
        echo "Attempting to import key: $key" | log
        for ks in "${keyservers[@]}"; do
            if gpg --batch --no-tty --keyserver "$ks" --recv-keys "$key"; then
                echo "Successfully imported key $key from $ks." | log
                imported=1
                break
            else
                echo "Failed to import key $key from $ks. Trying search method..." | log
                if printf "1\n" | gpg --batch --no-tty --keyserver "$ks" --search-keys "$key"; then
                    echo "Successfully imported key $key using search method from $ks." | log
                    imported=1
                    break
                else
                    echo "Search method failed for key $key from $ks." | log
                fi
            fi
        done
        if [ "$imported" -eq 0 ]; then
            echo "Error: Unable to import key $key from any keyserver." | log
        fi
    done
}

import_cpanel_keys() {
    echo "Importing cPanel GPG keys..." | log
    local keys=("A8D3785C" "3A79BD29" "5072E1F5" "C74CD1D8")
    local keyservers=("hkp://keyserver.ubuntu.com:80" "hkps://keys.openpgp.org")
    for key in "${keys[@]}"; do
        local imported=0
        echo "Attempting to import key: $key" | log
        for ks in "${keyservers[@]}"; do
            if gpg --batch --no-tty --keyserver "$ks" --recv-keys "$key"; then
                echo "Successfully imported key $key from $ks." | log
                imported=1
                break
            else
                echo "Failed to import key $key from $ks. Trying search method..." | log
                if printf "1\n" | gpg --batch --no-tty --keyserver "$ks" --search-keys "$key"; then
                    echo "Successfully imported key $key using search method from $ks." | log
                    imported=1
                    break
                else
                    echo "Search method failed for key $key from $ks." | log
                fi
            fi
        done
        if [ "$imported" -eq 0 ]; then
            echo "Error: Unable to import key $key from any keyserver." | log
        fi
    done
}

import_mariadb_apt_key() {
    echo "Importing MariaDB repository key..." | log
    if curl -fsSL https://mariadb.org/mariadb_release_signing_key.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/mariadb.gpg; then
        echo "Successfully imported MariaDB repository key." | log
    else
        echo "Error: Unable to import MariaDB repository key." | log
        exit 1
    fi
}

download_cpanel_installation() {
    nav_to_appdir
    echo "Downloading cPanel installation script from ${CPANEL_INSTALLER_URL}..." | log
    if ! curl -f -L -o "${APPDIR}/${INSTALLER_OUTPUT}" "${CPANEL_INSTALLER_URL}"; then
        echo "Error: Failed to download from ${CPANEL_INSTALLER_URL}" | log
        exit 1
    fi
    echo "Download complete: ${APPDIR}/${INSTALLER_OUTPUT}" | log
}

update_motday() {
    # Define the managed MOTD file (adjust if needed)
    local MOTD_FILE="/etc/update-motd.d/99-description"
    local MOTD_DIR="/etc/update-motd.d"

    # Require at least one argument
    if [ "$#" -lt 1 ]; then
        echo "Usage: update_motd {remove all|remove \"<substring>\"|write \"<message>\"|update \"<message>\"}"
        return 1
    fi

    local command="$1"
    shift

    case "$command" in
        remove)
            if [ "$1" = "all" ]; then
                echo "Removing all MOTD content from ${MOTD_FILE}..." | log
                rm -f "$MOTD_FILE" && echo "MOTD removed." | log || echo "Failed to remove MOTD." | log
                if [ -d "$MOTD_DIR" ]; then
                    echo "Removing all MOTD scripts from ${MOTD_DIR}..." | log
                    rm -f "$MOTD_DIR/*"
                fi

            else
                local pattern="$1"
                if [ -f "$MOTD_FILE" ]; then
                    echo "Removing lines containing '${pattern}' from ${MOTD_FILE}..." | log
                    # Remove lines matching the pattern (create backup first)
                    sed -i.bak "/${pattern}/d" "$MOTD_FILE" && echo "Lines removed." | log || echo "Failed to remove lines." | log
                else
                    echo "MOTD file does not exist." | log
                fi
            fi
            ;;

        write)
            # Overwrite the MOTD file with new content
            local content="$*"
            echo "Writing new MOTD content to ${MOTD_FILE}..." | log
            sudo tee "$MOTD_FILE" >/dev/null <<EOF
#!/bin/bash
echo ""
echo "cPanel Post Installation"
echo "------------------------"
echo "$content"
echo ""
echo "To remove this message, run: rm -f /etc/update-motd.d/99-description"
echo ""
echo "------------------------"
echo ""
echo ""
EOF
            sudo chmod +x "$MOTD_FILE"
            echo "MOTD file written." | log
            ;;

        update)
            # Append new content to the existing MOTD file
            local content="$*"
            echo "Appending to MOTD file ${MOTD_FILE}..." | log
            if [ ! -f "$MOTD_FILE" ]; then
                # If file doesn't exist, write it with the new content
                sudo tee "$MOTD_FILE" >/dev/null <<EOF
#!/bin/bash
echo "$content"
echo "To remove this message, run: update_motd remove all"
EOF
            else
                # Append an echo command to the file
                sudo bash -c "echo 'echo \"$content\"' >> \"$MOTD_FILE\""
            fi
            sudo chmod +x "$MOTD_FILE"
            echo "MOTD file updated." | log
            ;;

        *)
            echo "Usage: update_motd {remove all|remove \"<substring>\"|write \"<message>\"|update \"<message>\"}"
            return 1
            ;;
    esac
}

run_installation_script() {
    echo "Running cPanel installation script..." | log
    # Clear the log file before starting
    : > "$LOG_PATH"

    # Start the installer in the background and capture its PID
    bash "${APPDIR}/${INSTALLER_OUTPUT}" 2>&1 | tee -a "$LOG_PATH" &
    installer_pid=$!

    # Process tail output using process substitution so that the while loop can exit normally.
    while IFS= read -r line; do
        # Check for the autologin URL using a capturing regex group.
        if [[ "$line" =~ (https://[^[:space:]]*login/\?session=[^[:space:]]+) ]]; then
            AUTLOGIN_URL="${BASH_REMATCH[1]}"
            echo "One-Time autologin URL: $AUTLOGIN_URL" | log
            cd /opt/installer
            if [ -f "include/installInProgressSSH-remove" ]; then
                bash "include/installInProgressSSH-remove"
            else
                echo "Warning: installInProgressSSH-remove not found." | log
            fi

            # Update the MOTD with the captured URL as a single argument (with a newline in between)
            update_motday write "One-time autologin URL: ${AUTLOGIN_URL}
cPanel Web UI: https://${CWM_DOMAIN}:2087"

            descriptionAppend "One-time autologin URL: ${AUTLOGIN_URL}"
            descriptionAppend "cPanel Web UI: https://${CWM_DOMAIN}:2087"
        fi

        if [[ "$line" == *"Thank you for installing cPanel & WHM"* ]]; then
            echo "Detected completion message." | log
            kill "$installer_pid" 2>/dev/null || true
            break
        fi
    done < <(tail -n0 -F "$LOG_PATH")

    # Wait for the installer process to exit (ignore errors if already killed)
    wait "$installer_pid" 2>/dev/null || true
}

install_imagestick_plugin() {
    echo "Installing imagestick plugin (ImageMagick for EA-PHP)..." | log
    apt-get update
    apt-get install -y imagemagick libmagickwand-dev
    echo "Imagestick plugin (ImageMagick for EA-PHP) installation completed." | log
}

post_install_cleanup() {
    local END_TIME
    END_TIME=$(date +%s)
    local DURATION=$((END_TIME - START_TIME))
    echo "Installation completed in ${DURATION} seconds." | log
    tagScript success
}

main() {
    echo "Starting cPanel setup..." | log
    disable_firewall
    install_dependencies
    set_hostname
    add_rdate_hosts_entry
    sync_time
    add_gpg_key
    import_mysql_gpg_keys
    import_cpanel_keys
    import_mariadb_apt_key

    echo "Updating gpg keys..." | log
    gpg --refresh-keys
    apt-get update

    download_cpanel_installation
    run_installation_script
    install_imagestick_plugin
    post_install_cleanup
}

main
