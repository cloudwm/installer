#!/bin/bash


if [ -f "include/startup.sh" ]; then
    . include/startup.sh
	
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

LOG_PATH="/var/log/cpanel-install.log"
WEB_PATH="/var/www/html"
HTML_PATH="/var/www/html/index.html"
APPDIR="/opt/cpanel"

nav_to_appdir() {
    # Create the directory if it doesn't exist
    if [ ! -d "$APPDIR" ]; then
        echo "Creating directory ${APPDIR}..."
        mkdir -p "$APPDIR" || { echo "Failed to create ${APPDIR}"; return 1; }
    fi

    echo "Navigating to ${APPDIR}..."
    cd "$APPDIR" || { echo "Failed to change directory to ${APPDIR}"; return 1; }

    # Verify that we are in the correct directory
    current_dir=$(pwd)
    if [ "$current_dir" != "$APPDIR" ]; then
        echo "Error: Current directory (${current_dir}) does not match ${APPDIR}."
        return 1
    fi

    echo "Successfully navigated to ${APPDIR}."
}

clone_cwm_installer_repo() {
	echo "========================================"
	echo "Cloning cwm installer repo..."
    echo "========================================"
	echo ""
	git -c http.sslVerify=False clone https://git.cloudwm-dev.com/DevOps/installer.git

}

disable_firewall() {
	echo "========================================"
	echo "Disabling firewall..." | log
    echo "========================================"
	echo ""
	iptables-save > ~/firewall.rules
    systemctl stop ufw.service
    systemctl disable ufw.service
}

install_dependencies() {
	echo "========================================"
	echo "Installing dependencies..." | log
	echo "========================================"
	echo ""
    apt -y install perl perl-base chrony
}

set_hostname() {
	echo "========================================"
	echo "Configuring hosname..." | log
	echo "========================================"
	echo ""
    # Retrieve the first IP address (adjust if you have multiple interfaces)
    local ip
    ip=$(hostname -I | awk '{print $1}')

    # Check if we got an IP address
    if [[ -z "$ip" ]]; then
        echo "No IP address found!" | log
        return 1
    fi

    # Replace dots with dashes
    local formatted_ip
    formatted_ip=$(echo "$ip" | tr '.' '-')

    # Create the new hostname string
    local new_hostname="${formatted_ip}.cloud-xip.com"

    # Set the hostname (requires sudo privileges)
    sudo hostnamectl set-hostname "$new_hostname"

    # Optionally, echo the new hostname for verification
    echo "Hostname set to: $new_hostname" | log
}

disable_networkManager() {
	echo "========================================"
	echo "Disabling NetworkManager..." | log
	echo "========================================"
	echo ""
    systemctl stop NetworkManager
    systemctl disable NetworkManager
}

add_rdate_hosts_entry() {
	echo "========================================"
	echo "Adding rdate host entry..." | log
	echo "========================================"
	echo ""
    local host_entry="127.0.0.1   rdate.cpanel.net"
    
    # Check if the entry already exists (ignoring whitespace differences)
    if grep -E -q '127\.0\.0\.1\s+.*rdate\.cpanel\.net' /etc/hosts; then
        echo "Entry for rdate.cpanel.net already exists in /etc/hosts." | log
		
    else
        echo "Adding entry for rdate.cpanel.net to /etc/hosts..." | log
        echo "$host_entry" | sudo tee -a /etc/hosts >/dev/null
        if [ $? -eq 0 ]; then
            echo "Entry added successfully." | log
        else
            echo "Failed to add entry. Please check your permissions." | log
        fi
    fi
}

sync_time() {
    echo "========================================"
	echo "Syncing time..." | log
	echo "========================================"
	echo ""
    chronyc tracking
    chronyc makestep

    echo "Moving rdate file..." | log
    mv /usr/sbin/rdate /usr/sbin/rdate.orig

    echo "Creating dummy rdate..." | log
    cat << 'EOF' | sudo tee /usr/sbin/rdate >/dev/null
#!/bin/bash
# Dummy rdate command for cPanel installation workaround.
exit 0
EOF

    chmod +x /usr/sbin/rdate
}

add_gpg_key() {
    echo "========================================"
	echo "Adding GPG Key..." | log
	echo "========================================"
	echo ""
	local key="A8D3785C"
    local ks="hkp://keyserver.ubuntu.com:80"
    
    echo "Downloading GPG key $key from $ks using --recv-keys..." | log
    if gpg --batch --no-tty --keyserver "$ks" --recv-keys "$key"; then
        echo "Successfully downloaded GPG key $key." | log
    else
        echo "Failed to download GPG key $key using --recv-keys. Trying search method..." | log
        if printf "1\n" | gpg --batch --no-tty --keyserver "$ks" --search-keys "$key"; then
            echo "Successfully imported GPG key $key using search method." | log
        else
            echo "Error: Unable to download GPG key $key from $ks." | log
        fi
    fi
}

import_mysql_gpg_keys() {
	echo "========================================"
	echo "Importing MySQL GPG keys..." | log
	echo "========================================"
	echo ""
    local keys=("A8D3785C" "3A79BD29" "5072E1F5" "C74CD1D8")
    local keyservers=(
        "hkps://keyserver.ubuntu.com"
        "hkps://keys.openpgp.org"
    )

    for key in "${keys[@]}"; do
        local imported=0
        echo "Attempting to import key: $key" | log
        for ks in "${keyservers[@]}"; do
            echo "Trying keyserver: $ks using --recv-keys..." | log
            if gpg --batch --no-tty --keyserver "$ks" --recv-keys "$key"; then
                echo "Successfully imported key $key from $ks." | log
                imported=1
                break
            else
                echo "Failed to import key $key using --recv-keys from $ks." | log
                echo "Attempting to import via search method..." | log
                if printf "1\n" | gpg --batch --no-tty --keyserver "$ks" --search-keys "$key"; then
                    echo "Successfully imported key $key using search method from $ks." | log
                    imported=1
                    break
                else
                    echo "Search method failed for key $key from $ks." | log
                fi
            fi
        done
        
        if [ "$imported" -eq 0 ]; then
            echo "Error: Unable to import key $key from any keyserver." | log
        fi
    done
}

import_cpanel_keys() {
	echo "========================================"
	echo "Importing cPanel GPG keys..." | log
	echo "========================================"
	echo ""
    local keys=("A8D3785C" "3A79BD29" "5072E1F5" "C74CD1D8")
    local keyservers=( "hkp://keyserver.ubuntu.com:80" "hkps://keys.openpgp.org" )
    
    for key in "${keys[@]}"; do
        local imported=0
        echo "Attempting to import key: $key" | log
        for ks in "${keyservers[@]}"; do
            echo "Trying keyserver: $ks using --recv-keys..." | log
            if gpg --batch --no-tty --keyserver "$ks" --recv-keys "$key"; then
                echo "Successfully imported key $key from $ks." | log
                imported=1
                break
            else
                echo "Failed to import key $key using --recv-keys from $ks." | log
                echo "Attempting to import via search method..." | log
                if printf "1\n" | gpg --batch --no-tty --keyserver "$ks" --search-keys "$key"; then
                    echo "Successfully imported key $key using search method from $ks." | log
                    imported=1
                    break
                else
                    echo "Search method failed for key $key from $ks." | log
                fi
            fi
        done
        
        if [ "$imported" -eq 0 ]; then
            echo "Error: Unable to import key $key from any keyserver." | log
        fi
    done
}

import_mariadb_apt_key() {
    echo "========================================"
	echo "Importing MariaDB repository key..." | log
	echo "========================================"
	echo ""
    curl -fsSL https://mariadb.org/mariadb_release_signing_key.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/mariadb.gpg
    if [ $? -eq 0 ]; then
        echo "Successfully imported MariaDB repository key." | log
    else
        echo "Error: Unable to import MariaDB repository key." | log
        exit 1
    fi
}

download_cpanel_installation() {
	echo "========================================"
	echo "Downloading and running install script..." | log
	echo "========================================"
	echo ""
    local url="https://securedownloads.cpanel.net/latest"
    local output="latest"

    # Check if curl is installed
    if ! command -v curl >/dev/null 2>&1; then
        echo "Error: curl is not installed." | log
        return 1
    fi

    echo "Downloading from ${url}..." | log
    if ! curl -f -L -o "${output}" "${url}"; then
        echo "Error: Failed to download from ${url}" | log
        return 1
    fi

    echo "Download complete: ${output}"
}

run_installation_script() {
    echo "========================================"
    echo "Running cPanel installation script..." | log
    echo "========================================"
    echo ""
    start_time=$(date +%s)
    bash latest | tee "$LOG_PATH" &
}

main() {
    echo "Running cPanel setup..." | log
    
    # Define variables
    rootDir="$(rootDir)"
    updateStatus="$rootDir/include/updateInstallStatus.sh"
    url=""

    # Run the cPanel setup and tee the output to both stdout and the log file
    if [ ! -f "$LOG_PATH" ]; then
        touch "$LOG_PATH"
    fi

    # Define lists to hold log messages
    declare -a pre_display_list=()
    declare -A seen # associative array to track seen lines

    nav_to_appdir
    #clone_cwm_installer_repo
    "$updateStatus" "$HTML_PATH" -ap "Disabling firewall..."
    disable_firewall
    "$updateStatus" "$HTML_PATH" -ap "Installing dependencies..."
    install_dependencies
    "$updateStatus" "$HTML_PATH" -ap "Configuring hostname..."
    set_hostname
    "$updateStatus" "$HTML_PATH" -ap "Tweaking rdate routing..."
    add_rdate_hosts_entry
    "$updateStatus" "$HTML_PATH" -ap "Syncing time..."
    sync_time
    "$updateStatus" "$HTML_PATH" -ap "Adding GPG key..."
    add_gpg_key
    "$updateStatus" "$HTML_PATH" -ap "Importing MySQL GPG keys..."
    import_mysql_gpg_keys
    "$updateStatus" "$HTML_PATH" -ap "Importing cPanel GPG keys..."
    import_cpanel_keys
    "$updateStatus" "$HTML_PATH" -ap "Importing MariaDB repository key..."
    import_mariadb_apt_key
    "$updateStatus" "$HTML_PATH" -ap "Updating after gpg downloads..."
    apt update
    "$updateStatus" "$HTML_PATH" -ap "Downloading and running install script..."
    download_cpanel_installation
    "$updateStatus" "$HTML_PATH" -ap "Running cPanel installation script..."
    run_installation_script

    # Start tailing the log file and process lines as they come
    tail -f "$LOG_PATH" | while read -r line; do
        # Locate the line to display
        if [[ "$line" == *"( INFO): "* ]]; then
            line="${line#*( INFO): }"

            # Check if the line contains the one-time autologin URL
            if [[ "$line" == https://* && "$line" == *"login/?session="* ]]; then
                url="$line"
                # Update the UI with the one-time autologin URL
                "updateStatus" "$HTML_PATH" -ur "One-time autologin URL: $url"
                
                # Display the redirection in UI
                "updateStatus" "$HTML_PATH" -sr
            fi

            # Check if the line has been seen already
            if [[ -z "${seen[$line]}" ]]; then
                seen[$line]=1
                pre_display_list+=("$line")

                "$updateStatus" "$HTML_PATH" -cp
                for stage in "${pre_display_list[@]}"; do
                    # Remove all trailing dots first
                    cleaned_stage=$(echo "$stage" | sed 's/\.*$//')
                    
                    # Append exactly three dots
                    final_stage="${cleaned_stage}..."
                    
                    # Update the installation landing page
                    "$updateStatus" "$HTML_PATH" -ap "${final_stage}"
                done
            fi
        fi
    done

    end_time=$(date +%s)
    duration=$((end_time - start_time))
    echo "Installation completed in $duration seconds." | log
    
    # Touchups
    bash tweaks/motd-description-append
    bash tweaks/cwm-description-autoconfig
    
    echo "Adding descriptions" | log
    descriptionAppend "cPanel Web UI: https://${CWM_DOMAIN}:2087"
    
    # Add the URL to the description if it was found
    if [[ -n "$url" ]]; then
        descriptionAppend "One-time autologin URL: $url"
    fi

    tagScript success
    exit 0
}

main
