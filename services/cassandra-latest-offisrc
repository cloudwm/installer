#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

rootDir="$(rootDir)"
updateStatus="$rootDir/include/updateInstallStatus.sh"
HTML_PATH="/var/www/html/index.html"

MACHINE_IP=$(hostname -I | awk '{print $1}')
DOMAIN_NAME="$(echo "$MACHINE_IP" | tr '.' '-')".cloud-xip.com

install_dependencies() {
    echo "Installing Nginx and Certbot..." | log
    apt-get update
    apt install -y nginx certbot python3-certbot-nginx
    systemctl enable --now nginx
}

configure_firewall() {
    apt update
    apt install -y ufw
    ufw --force enable

    ufw allow ssh
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw allow 3000/tcp
    ufw allow 7000/tcp
    ufw allow 7001/tcp
    ufw allow 7199/tcp
    ufw allow 9042/tcp
    ufw allow 9160/tcp

    systemctl restart ufw
}

install_docker() {
    if command -v docker >/dev/null 2>&1; then
        echo "Docker is already installed. Skipping Docker installation." | log
        return
    fi

    echo "Adding Docker GPG key..." | log
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
        | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg

    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
        > /etc/apt/sources.list.d/docker.list

    echo "Installing Docker engine and plugins..." | log
    apt update
    apt install -y \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin

    systemctl enable --now docker
    echo "Docker installation completed successfully." | log
}

install_cassandra() {
    echo "Creating Docker network for Cassandra..." | log
    docker network inspect cassandra-net >/dev/null 2>&1 || docker network create cassandra-net

    echo "Checking for existing Cassandra container..." | log
    if docker ps -a --format '{{.Names}}' | grep -q '^cassandra$'; then
        echo "Cassandra container already exists. Skipping installation." | log
        return
    fi

    echo "Pulling Apache Cassandra Docker image..." | log
    docker pull cassandra:latest

    echo "Starting Cassandra container..." | log
    docker run -d \
        --name cassandra \
        --network cassandra-net \
        --restart unless-stopped \
        -p 7000:7000 \
        -p 7001:7001 \
        -p 7199:7199 \
        -p 9042:9042 \
        -p 9160:9160 \
        cassandra:latest

    echo "Waiting for Cassandra to initialize..." | log
    sleep 60

    echo "Verifying Cassandra container status..." | log
    if docker ps | grep -q cassandra; then
        echo "Cassandra container is running successfully." | log
    else
        echo "Cassandra container failed to start. Check logs with: docker logs cassandra" | log
        exit 1
    fi
}

install_cassandra_web() {
    echo "Checking for existing Cassandra Web container..." | log
    if docker ps -a --format '{{.Names}}' | grep -q '^cassandra-web$'; then
        echo "Cassandra Web container already exists. Skipping installation." | log
        return
    fi

    echo "Pulling Cassandra Web Docker image..." | log
    docker pull ipushc/cassandra-web:latest

    echo "Starting Cassandra Web container..." | log
    docker run -d \
        --name cassandra-web \
        --network cassandra-net \
        --restart unless-stopped \
        -p 3000:8083 \
        -e CASSANDRA_HOST="cassandra" \
        -e CASSANDRA_PORT=9042 \
        -e CASSANDRA_USER=cassandra \
        -e CASSANDRA_PASS=cassandra \
        -e CASSANDRA_KEYSPACE=system \
        ipushc/cassandra-web:latest

    sleep 10
    if docker ps | grep -q cassandra-web; then
        echo "Cassandra Web UI is running at http://${MACHINE_IP}:3000" | log
    else
        echo "Cassandra Web UI failed to start. Check logs with: docker logs cassandra-web" | log
    fi
}

test_db_connection() {
	echo "Testing CQLSH connectivity..." | log
    docker exec cassandra cqlsh -e "SHOW VERSION;" >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Cassandra CQLSH is responding." | log
        "$updateStatus" "$HTML_PATH" -ap "Cassandra CQLSH is responding."
    else
        echo "CQLSH failed. Verify container health." | log
        "$updateStatus" "$HTML_PATH" -ap "CQLSH failed. Verify container health."
    fi
}

switch_nginx_to_proxy() {
    echo "Switching Nginx to reverse proxy for Cassandra Web UI..." | log
    NGINX_CONF="/etc/nginx/sites-available/cassandra-web.conf"
    cat > "$NGINX_CONF" <<EOF
server {
    listen 80;
    server_name ${DOMAIN_NAME};

    location / {
        proxy_pass         http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade \$http_upgrade;
        proxy_set_header   Connection 'upgrade';
        proxy_set_header   Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF

    ln -sf "$NGINX_CONF" /etc/nginx/sites-enabled/cassandra-web.conf
    nginx -t && systemctl reload nginx
    echo "Nginx configuration switched to Cassandra Web reverse proxy." | log
}

obtain_ssl() {
    echo "Reloading Nginx before requesting certificate..." | log
    systemctl reload nginx

    echo "Requesting Let's Encrypt certificate..." | log
    certbot --nginx -d "$DOMAIN_NAME" --non-interactive --agree-tos -m "admin@${DOMAIN_NAME}" --redirect
    echo "Nginx reverse proxy and SSL configured for https://${DOMAIN_NAME}" | log
}

configure_motd() {
    echo "Configuring MOTD..." | log
    rm -f /etc/update-motd.d/*
    : > /etc/motd

    cat > /etc/motd <<EOF
============================================================
  Apache Cassandra + Cassandra Web UI
============================================================

Cassandra service:    docker container named 'cassandra'
Web UI:               https://${DOMAIN_NAME}
Default credentials:  cassandra / cassandra

Useful commands:
  docker ps                        # list running containers
  docker logs cassandra             # view Cassandra logs
  docker exec -it cassandra cqlsh   # connect to CQL shell
  docker logs cassandra-web         # view Web UI logs

============================================================
EOF
    echo "MOTD configured successfully." | log
}

main() {
    configure_firewall

    "$updateStatus" "$HTML_PATH" -ap "Installing Nginx and dependencies..."
    install_dependencies

    "$updateStatus" "$HTML_PATH" -ap "Installing Docker..."
    install_docker

    "$updateStatus" "$HTML_PATH" -ap "Installing Cassandra..."
    install_cassandra

    "$updateStatus" "$HTML_PATH" -ap "Installing Cassandra Web UI..."
    install_cassandra_web

    "$updateStatus" "$HTML_PATH" -ap "Configuring Nginx reverse proxy..."
    switch_nginx_to_proxy

    "$updateStatus" "$HTML_PATH" -ap "Obtaining SSL certificate..."
    obtain_ssl
	
	test_db_connection
    configure_motd

    "$updateStatus" "$HTML_PATH" -sr
    "$updateStatus" "$HTML_PATH" -ur "Cassandra Web UI is running on https://${DOMAIN_NAME}"
    "$updateStatus" "$HTML_PATH" -tr "https://${DOMAIN_NAME}"
}

main
