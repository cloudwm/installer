#!/bin/bash

# Include startup.sh if it exists
if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
else
    echo "Warning: startup.sh not found. Some functions (curlDownload, waitOrStop, descriptionAppend) may be unavailable."
fi

VERSION=8.1.1
INSTALL_DIR="/usr/local/valkey"
CONFIG_DIR="/etc/valkey"
LOG_DIR="/usr/local/valkey"

# Function to install dependencies
install_dependencies() {
    # Detect OS
    if command -v apt-get &> /dev/null; then
        # Debian/Ubuntu
        apt-get update
        apt-get install -y tar make gcc
    elif command -v yum &> /dev/null; then
        # CentOS/RHEL
        yum install -y tar make gcc
    else
        echo "Error: Unsupported package manager. Please install tar, make, and gcc manually."
        exit 1
    fi
}

# Install dependencies if not present
if ! command -v tar &> /dev/null || ! command -v make &> /dev/null || ! command -v gcc &> /dev/null; then
    install_dependencies
fi

# Verify dependencies
for cmd in tar make gcc; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: $cmd is required but not installed."
        exit 1
    fi
done

# Create directories
mkdir -p "$INSTALL_DIR/bin" "$CONFIG_DIR" "$LOG_DIR"

# Download and extract Valkey
# Fallback to curl if curlDownload is not defined
if type curlDownload &> /dev/null; then
    curlDownload https://github.com/valkey-io/valkey/archive/refs/tags/$VERSION.tar.gz
else
    curl -L -o $VERSION.tar.gz https://github.com/valkey-io/valkey/archive/refs/tags/$VERSION.tar.gz
fi
# Fallback for waitOrStop
if type waitOrStop &> /dev/null; then
    waitOrStop 0 "Failed to download Valkey from official GitHub repo"
else
    if [ $? -ne 0 ]; then
        echo "Failed to download Valkey from official GitHub repo"
        exit 1
    fi
fi
tar -xzvf $VERSION.tar.gz

# Compile and install Valkey
echo "Entering valkey-$VERSION directory"
cd valkey-$VERSION || { echo "Error: Failed to enter valkey-$VERSION directory"; exit 1; }
echo "Running make..."
make | tee /tmp/valkey-make.log
if [ $? -ne 0 ]; then
    echo "Error: Compilation failed. Check /tmp/valkey-make.log for details."
    exit 1
fi
echo "Running make install..."
make PREFIX="$INSTALL_DIR" install | tee -a /tmp/valkey-make.log
if [ $? -ne 0 ]; then
    echo "Error: Installation failed. Check /tmp/valkey-make.log for details."
    exit 1
fi
cd ..

# Create a basic configuration file with logging
cat << EOF > "$CONFIG_DIR/valkey.conf"
port 6379
bind 0.0.0.0
dir $INSTALL_DIR
logfile $LOG_DIR/valkey.log
EOF

# Clean up
rm -rf $VERSION.tar.gz valkey-$VERSION

# Verify binaries exist
for bin in valkey-cli valkey-server; do
    if [ ! -f "$INSTALL_DIR/bin/$bin" ]; then
        echo "Error: $bin not found in $INSTALL_DIR/bin. Compilation or installation failed."
        echo "Check /tmp/valkey-make.log for errors."
        exit 1
    fi
    chmod +x "$INSTALL_DIR/bin/$bin"
done

# Start Valkey server in the background
$INSTALL_DIR/bin/valkey-server $CONFIG_DIR/valkey.conf &

# Wait briefly and verify server is running
sleep 2
if ! ps aux | grep -v grep | grep valkey-server > /dev/null; then
    echo "Error: Valkey server failed to start. Check logs in $LOG_DIR/valkey.log."
    exit 1
fi

# Test valkey-cli connectivity
if ! $INSTALL_DIR/bin/valkey-cli PING | grep -q PONG; then
    echo "Error: valkey-cli failed to connect to server. Check server status and logs in $LOG_DIR/valkey.log."
    exit 1
fi

# Update PATH for current session and future sessions
export PATH=$PATH:$INSTALL_DIR/bin
echo 'export PATH=$PATH:/usr/local/valkey/bin' >> /root/.bashrc

descriptionAppend "Valkey CLI: Connect using 'valkey-cli' or 'valkey-cli -h ${CWM_DOMAIN} -p 6379'"
descriptionAppend " "
descriptionAppend "Basic Usage: Use 'valkey-cli' for command-line interaction"
descriptionAppend "Example: 'SET key value' to store data"
descriptionAppend "Example: 'GET key' to retrieve data"
descriptionAppend "For more commands visit: https://valkey.io/commands/"
