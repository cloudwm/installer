#!/bin/bash

# Source startup script
if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

# Check Nginx dependency
checkTagExist nginx.success

rootDir=$(rootDir)
rabbitmqDomain="${CWM_SERVERIP//./-}.cloud-xip.com"

# Install dependencies for repository access
echo "Installing dependencies for repository access" | log
installPackage apt-transport-https ca-certificates wget curl gnupg lsb-release
waitOrStop 0 "Failed to install repository dependencies"

# Add RabbitMQ and Erlang GPG keys
echo "Adding RabbitMQ and Erlang GPG keys" | log
curl -1sLf "https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA" | gpg --dearmor | tee /usr/share/keyrings/rabbitmq-team.gpg > /dev/null
curl -1sLf "https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/gpg.E495BB49CC4BBE5B.key" | gpg --dearmor | tee /usr/share/keyrings/rabbitmq-erlang.gpg > /dev/null
curl -1sLf "https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-server/gpg.9F4587F226208342.key" | gpg --dearmor | tee /usr/share/keyrings/rabbitmq-server.gpg > /dev/null
waitOrStop 0 "Failed to add GPG keys"

# Add RabbitMQ and Erlang repositories
echo "Adding RabbitMQ and Erlang repositories" | log
cat << EOF > /etc/apt/sources.list.d/rabbitmq.list
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq-erlang.gpg] https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq-server.gpg] https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-server/deb/ubuntu noble main
EOF
waitOrStop 0 "Failed to add repositories"

# Update package index
echo "Updating package index" | log
apt-get update

# Install Erlang and RabbitMQ
echo "Installing Erlang and RabbitMQ" | log
installPackage erlang-nox rabbitmq-server
waitOrStop 0 "Failed to install Erlang and RabbitMQ"

# Enable RabbitMQ management plugin
echo "Enabling RabbitMQ management plugin" | log
rabbitmq-plugins enable rabbitmq_management
waitOrStop 0 "Failed to enable RabbitMQ management plugin"

# Configure admin user
echo "Adding admin user" | log
rabbitmqctl add_user admin "${ADMINPASSWORD}"
rabbitmqctl set_user_tags admin administrator
rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
rabbitmqctl delete_user guest
waitOrStop 0 "Failed to configure admin user"

# Configure Nginx for Certbot
echo "Configuring Nginx for Certbot" | log
mkdir -p /var/lib/letsencrypt/.well-known
chgrp www-data /var/lib/letsencrypt
chmod g+s /var/lib/letsencrypt
unlink /etc/nginx/sites-enabled/default 2>/dev/null || true
unlink /etc/nginx/sites-enabled/default-ssl 2>/dev/null || true
cp "$rootDir/tweaks/extras/rabbitmq-nginx/letsencrypt.conf" /etc/nginx/snippets/
cp "$rootDir/tweaks/extras/rabbitmq-nginx/register.conf" /etc/nginx/sites-available/
ln -s /etc/nginx/sites-available/register.conf /etc/nginx/sites-enabled/
systemctl restart nginx
waitOrStop 0 "Failed to restart Nginx for Certbot"

# Generate SSL certificate
echo "Generating SSL certificate with Certbot" | log
execSpecial 3 '(fail|error)' certbot certonly --agree-tos -n --email "${ADMINEMAIL}" --webroot -w /var/lib/letsencrypt/ -d "${rabbitmqDomain}" ${CWM_DEBUG:+"--test-cert"}
if [[ $? == 1 ]]; then
    echo "Certbot failed, generating self-signed certificate" | log
    export certbot_failed=1
    mkdir -p /etc/letsencrypt/live/"${rabbitmqDomain}"
    openssl req -x509 -sha256 -newkey rsa:2048 -keyout /etc/letsencrypt/live/"${rabbitmqDomain}/privkey.pem" -out /etc/letsencrypt/live/"${rabbitmqDomain}/fullchain.pem" -days 1024 -nodes -subj "/CN=${rabbitmqDomain}"
    waitOrStop 0 "Self-signed certificate creation failed"
else
    export certbot_failed=0
fi

# Configure Nginx for RabbitMQ
echo "Configuring Nginx for RabbitMQ" | log
unlink /etc/nginx/sites-enabled/register.conf 2>/dev/null || true
cp "$rootDir/tweaks/extras/rabbitmq-nginx/rabbitmq.conf" /etc/nginx/sites-available/
sed -i "s|/path/to/your.key|/etc/letsencrypt/live/${rabbitmqDomain}/privkey.pem|" /etc/nginx/sites-available/rabbitmq.conf
sed -i "s|/path/to/your.crt|/etc/letsencrypt/live/${rabbitmqDomain}/fullchain.pem|" /etc/nginx/sites-available/rabbitmq.conf
if [[ -f /etc/letsencrypt/live/${rabbitmqDomain}/chain.pem ]]; then
    sed -i "s|/path/to/your.chain|/etc/letsencrypt/live/${rabbitmqDomain}/chain.pem|" /etc/nginx/sites-available/rabbitmq.conf
else
    sed -i "/ssl_trusted_certificate \/path\/to\/your.chain;/d" /etc/nginx/sites-available/rabbitmq.conf
fi
ln -s /etc/nginx/sites-available/rabbitmq.conf /etc/nginx/sites-enabled/
systemctl restart nginx
waitOrStop 0 "Failed to restart Nginx"

# Configure RabbitMQ for SSL
echo "Configuring RabbitMQ for SSL" | log
cat << EOF > /etc/rabbitmq/rabbitmq.conf
listeners.ssl.default = 5671
management.ssl.port   = 15671
ssl_options.cacertfile = /etc/letsencrypt/live/${rabbitmqDomain}/chain.pem
ssl_options.certfile   = /etc/letsencrypt/live/${rabbitmqDomain}/fullchain.pem
ssl_options.keyfile    = /etc/letsencrypt/live/${rabbitmqDomain}/privkey.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = true
management.ssl.cacertfile = /etc/letsencrypt/live/${rabbitmqDomain}/chain.pem
management.ssl.certfile   = /etc/letsencrypt/live/${rabbitmqDomain}/fullchain.pem
management.ssl.keyfile    = /etc/letsencrypt/live/${rabbitmqDomain}/privkey.pem
EOF
chmod 600 /etc/rabbitmq/rabbitmq.conf

# Set permissions for Let's Encrypt
chmod 771 /etc/letsencrypt/live
chmod -R 775 /etc/letsencrypt/live/"${rabbitmqDomain}"
chmod 771 /etc/letsencrypt/archive
chmod -R 775 /etc/letsencrypt/archive/"${rabbitmqDomain}"

# Start and enable RabbitMQ service
echo "Starting RabbitMQ service" | log
systemctl enable rabbitmq-server
systemctl restart rabbitmq-server
waitOrStop 0 "Failed to start RabbitMQ service"

# Add descriptions
echo "Adding descriptions" | log
descriptionAppend "RabbitMQ Web UI: https://${rabbitmqDomain}:15671"
descriptionAppend "RabbitMQ Username: admin"
descriptionAppend "RabbitMQ Password: ${ADMINPASSWORD}"
descriptionAppend "RabbitMQ Config: /etc/rabbitmq/rabbitmq.conf"
descriptionAppend " "

tag rabbitmq.success
tagScript success

exit 0
