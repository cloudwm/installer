#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

MACHINE_IP=$(hostname -I | awk '{print $1}')
DOMAIN_NAME="$(echo "$MACHINE_IP" | tr '.' '-')".cloud-xip.com

rootDir="$(rootDir)"
updateStatus="$rootDir/include/updateInstallStatus.sh"
HTML_PATH="/var/www/html/index.html"

GUAC_DIR="/opt/guacamole"
GUAC_DB="guacdb"
GUAC_USER="admin"
GUAC_PASS="${ADMINPASSWORD}"
GUAC_VERSION="1.5.5"

install_docker() {
    if command -v docker >/dev/null 2>&1; then
        echo "Docker is already installed. Skipping Docker installation." | log
        "$updateStatus" "$HTML_PATH" -ap "Docker is already installed. Skipping Docker installation."
        return
    fi

    echo "Adding docker GPG key..." | log
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
      | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
      https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
      > /etc/apt/sources.list.d/docker.list

    echo "Installing Docker engine & plugins..." | log
    "$updateStatus" "$HTML_PATH" -ap "Installing Docker engine & plugins..."
    apt update
    apt install -y \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin

    echo "Enabling & Starting docker service..."
    systemctl enable --now docker

    echo "Docker installation completed successfully." | log
    "$updateStatus" "$HTML_PATH" -ap "Docker installation completed successfully."
    echo "Verify with:  sudo docker run hello-world" | log
}

open_ports() {
    echo "[INFO] Configuring firewall rules..." | log
    ufw allow 22/tcp || true
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw allow 8080/tcp
    ufw --force enable
    echo "[INFO] UFW firewall configured for ports 22, 80, 443, and 8080." | log
}

prepare_environment() {
    echo "[INFO] Preparing Guacamole directories..." | log
    mkdir -p ${GUAC_DIR}
    cd ${GUAC_DIR}
    chown -R root:root ${GUAC_DIR}
}

create_docker_compose() {
    echo "[INFO] Creating docker-compose.yml for Guacamole..." | log
    cat > ${GUAC_DIR}/docker-compose.yml <<EOF
version: '3.8'

services:
  guacd:
    image: guacamole/guacd:${GUAC_VERSION}
    container_name: guacd
    restart: always

  postgres:
    image: postgres:15
    container_name: guac-postgres
    restart: always
    environment:
      POSTGRES_DB: ${GUAC_DB}
      POSTGRES_USER: ${GUAC_USER}
      POSTGRES_PASSWORD: ${GUAC_PASS}
    volumes:
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql

  guacamole:
    image: guacamole/guacamole:${GUAC_VERSION}
    container_name: guacamole
    restart: always
    ports:
      - "8080:8080"
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_HOSTNAME: postgres
      POSTGRES_DATABASE: ${GUAC_DB}
      POSTGRES_USER: ${GUAC_USER}
      POSTGRES_PASSWORD: ${GUAC_PASS}
    depends_on:
      - guacd
      - postgres
EOF
}

generate_db_init() {
    echo "[INFO] Generating database init script..." | log
    docker run --rm guacamole/guacamole:${GUAC_VERSION} \
        /opt/guacamole/bin/initdb.sh --postgres > ${GUAC_DIR}/initdb.sql
}

start_guacamole() {
    echo "[INFO] Starting Guacamole containers..." | log
    cd ${GUAC_DIR}
    docker compose up -d
    echo "[INFO] Guacamole containers are running." | log
}

switch_nginx_to_proxy() {
    echo "[INFO] Configuring nginx reverse proxy for Guacamole..." | log
    NGINX_CONF="/etc/nginx/sites-available/guacamole.conf"
    cat > "$NGINX_CONF" <<EOF
server {
    listen 80;
    server_name ${DOMAIN_NAME};

    location / {
        proxy_pass         http://127.0.0.1:8080/guacamole/;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade \$http_upgrade;
        proxy_set_header   Connection 'upgrade';
        proxy_set_header   Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF

    ln -sf "$NGINX_CONF" /etc/nginx/sites-enabled/guacamole.conf
    nginx -t && systemctl reload nginx
}

obtain_ssl() {
    echo "[INFO] Reloading nginx before requesting certificate..." | log
    systemctl reload nginx

    echo "[INFO] Requesting Let's Encrypt certificate..." | log
    certbot --nginx -d "$DOMAIN_NAME" --non-interactive --agree-tos -m "admin@${DOMAIN_NAME}" --redirect

    echo "[INFO] SSL successfully configured for https://${DOMAIN_NAME}" | log
    "$updateStatus" "$HTML_PATH" -sr
    "$updateStatus" "$HTML_PATH" -ur "Guacamole is available on https://${DOMAIN_NAME}"
}

configure_motd() {
    echo "[INFO] Configuring custom MOTD..." | log
    rm -f /etc/update-motd.d/* /etc/motd
    cat <<EOF >/etc/motd
--------------------------------------------------
       Apache Guacamole Installed Successfully
--------------------------------------------------
Web Interface: https://${DOMAIN_NAME}
Default login: admin / ${GUAC_PASS}
Database User: ${GUAC_USER}
Database Name: ${GUAC_DB}

To manage:
  cd ${GUAC_DIR}
  docker compose ps
  docker compose logs -f
--------------------------------------------------
EOF
}

#---------------------------------------------------
# Main
#---------------------------------------------------
main() {
    "$updateStatus" "$HTML_PATH" -ap "Opening ports..."
    open_ports
    "$updateStatus" "$HTML_PATH" -ap "Installing Docker..."
    install_docker
    "$updateStatus" "$HTML_PATH" -ap "Preparing Guacamole environment..."
    prepare_environment
    "$updateStatus" "$HTML_PATH" -ap "Creating Docker Compose stack..."
    create_docker_compose
    "$updateStatus" "$HTML_PATH" -ap "Generating DB initialization..."
    generate_db_init
    "$updateStatus" "$HTML_PATH" -ap "Starting Guacamole containers..."
    start_guacamole
    "$updateStatus" "$HTML_PATH" -ap "Configuring Nginx proxy..."
    switch_nginx_to_proxy
    "$updateStatus" "$HTML_PATH" -ap "Obtaining SSL certificate..."
    obtain_ssl
    "$updateStatus" "$HTML_PATH" -ap "Finalizing setup..."
    configure_motd

    echo "[INFO] Apache Guacamole installation complete." | log
    echo "[INFO] Access Guacamole UI at https://${DOMAIN_NAME}" | log

    sleep 10
    "$updateStatus" "$HTML_PATH" -tr " https://${DOMAIN_NAME}"
}

main "$@"
